{"version":3,"file":"game-BlvZb4Jo.js","sources":["../../src/js/state.js","../../src/js/ui.js","../../src/js/game.js"],"sourcesContent":["import { DIFFICULTIES } from './constants.js';\n\nexport const state = {\n  generatedColor: null,\n  startTime: null,\n  score: 0,\n  tipCount: 0,\n  timerInterval: null,\n  computerTipCount: 0,\n  isGameActive: false,\n  difficulty: 'easy',\n};\n\nexport function resetState() {\n  state.generatedColor = null;\n  state.startTime = null;\n  // state.score = 0; // Score should persist between games, maybe? Let's keep it.\n  state.tipCount = 0;\n  if (state.timerInterval) {\n    clearInterval(state.timerInterval);\n  }\n  state.timerInterval = null;\n  state.computerTipCount = 0;\n  state.isGameActive = false;\n}\n\nexport function setDifficulty(difficulty) {\n  state.difficulty = difficulty;\n  const settings = DIFFICULTIES[difficulty];\n  state.tipCount = settings.tipCount;\n  state.computerTipCount = settings.computerTipCount;\n}\n","import { DOM, STRINGS } from './constants.js';\nimport { state } from './state.js';\nimport { storage } from './storage.js';\n// Import i18n commented out to avoid unused variable warning\n// import { i18n } from './i18n.js';\n\nfunction formatTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  seconds %= 3600;\n  const minutes = Math.floor(seconds / 60);\n  const secondsLeft = seconds % 60;\n\n  let timeString = '';\n  if (hours > 0) {\n    timeString += `${hours} √≥ra `;\n  }\n  if (minutes > 0 || hours > 0) {\n    timeString += `${minutes} perc `;\n  }\n  timeString += `${secondsLeft} m√°sodperc`;\n\n  return timeString;\n}\n\nexport function updateUserColor(color) {\n  DOM.userColor.style.backgroundColor = color;\n}\n\nexport function updateRandomColor(color, text = '') {\n  DOM.randomColor.style.backgroundColor = color;\n  DOM.randomColor.textContent = text;\n}\n\nexport function updateFeedback(message) {\n  DOM.feedback.textContent = message;\n  // Re-trigger animation\n  DOM.feedback.classList.remove('feedback-animate');\n  void DOM.feedback.offsetWidth; // Trigger reflow\n  DOM.feedback.classList.add('feedback-animate');\n}\n\nexport function updateTimer() {\n  const elapsedTime = Math.floor((Date.now() - state.startTime) / 1000);\n  DOM.timer.textContent = formatTime(elapsedTime);\n}\n\nexport function updateScore() {\n  DOM.score.textContent = state.score;\n}\n\nexport function updateComponentButtonsState(hex) {\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n\n  DOM.plusRedButton.disabled = r >= 255;\n  DOM.minusRedButton.disabled = r <= 0;\n  DOM.plusGreenButton.disabled = g >= 255;\n  DOM.minusGreenButton.disabled = g <= 0;\n  DOM.plusBlueButton.disabled = b >= 255;\n  DOM.minusBlueButton.disabled = b <= 0;\n}\n\nexport function updateTipButton() {\n  if (state.computerTipCount > 0) {\n    DOM.computerGuessButton.disabled = false;\n    DOM.computerGuessButton.textContent = STRINGS.computerTip(\n      state.computerTipCount\n    );\n  } else {\n    DOM.computerGuessButton.disabled = true;\n    DOM.computerGuessButton.textContent = STRINGS.noMoreTips;\n  }\n}\n\nexport function showModal() {\n  document.body.classList.add('modal-open');\n}\n\nexport function hideModal() {\n  document.body.classList.remove('modal-open');\n}\n\nexport function showResultModal() {\n  DOM.correctColorCode.textContent = state.generatedColor;\n  showModal();\n}\n\nexport function disableGameControls() {\n  DOM.checkButton.disabled = true;\n  DOM.computerGuessButton.disabled = true;\n  DOM.allSecondaryButtons.forEach((btn) => (btn.disabled = true));\n}\n\nexport function enableGameControls() {\n  DOM.checkButton.disabled = false;\n  DOM.computerGuessButton.disabled = false;\n  DOM.allSecondaryButtons.forEach((btn) => (btn.disabled = false));\n}\n\nexport function playSound(type) {\n  try {\n    const sound = new Audio(`/${type}.mp3`);\n    sound.play();\n  } catch (error) {\n    console.error('Hangf√°jl hiba: ', error);\n    updateFeedback('Hiba t√∂rt√©nt a hang lej√°tsz√°sa k√∂zben.');\n  }\n}\n\nexport function setPulseAnimation(shouldPulse) {\n    if (shouldPulse) {\n        DOM.randomColor.classList.add('pulsing');\n    } else {\n        DOM.randomColor.classList.remove('pulsing');\n    }\n}\n\nexport function resetUI() {\n  DOM.colorInput.value = '';\n  DOM.userColor.style.backgroundColor = '#FFFFFF';\n  DOM.feedback.textContent = '';\n  DOM.timer.textContent = '0';\n  updateScore();\n}\n\n/**\n * Update statistics display with latest game data\n */\nexport function updateStatistics() {\n  try {\n    // Get game statistics from storage\n    const gameHistory = storage.get('game_history', []);\n    const highScores = storage.getHighScores();\n    \n    // Calculate statistics from game history\n    const totalGames = gameHistory.length;\n    const gamesWon = gameHistory.filter(game => game.won).length;\n    const totalAccuracy = gameHistory.reduce((sum, game) => sum + (game.accuracy || 0), 0);\n    \n    // Total games\n    const totalGamesElement = document.getElementById('total-games');\n    if (totalGamesElement) {\n      totalGamesElement.textContent = totalGames.toString();\n    }\n    \n    // Win rate\n    const winRateElement = document.getElementById('win-rate');\n    if (winRateElement) {\n      const winRate = totalGames > 0 ? (gamesWon / totalGames * 100) : 0;\n      winRateElement.textContent = `${Math.round(winRate)}%`;\n    }\n    \n    // Best score\n    const bestScoreElement = document.getElementById('best-score');\n    if (bestScoreElement) {\n      const bestScore = highScores.length > 0 ? highScores[0].score : 0;\n      bestScoreElement.textContent = bestScore.toString();\n    }\n    \n    // Average accuracy\n    const avgAccuracyElement = document.getElementById('avg-accuracy');\n    if (avgAccuracyElement) {\n      const avgAccuracy = totalGames > 0 ? totalAccuracy / totalGames : 0;\n      avgAccuracyElement.textContent = `${Math.round(avgAccuracy)}%`;\n    }\n    \n    console.log('üìà Statistics updated:', {\n      totalGames,\n      winRate: `${Math.round((gamesWon / totalGames * 100) || 0)}%`,\n      bestScore: highScores.length > 0 ? highScores[0].score : 0,\n      avgAccuracy: `${Math.round((totalAccuracy / totalGames) || 0)}%`\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Failed to update statistics:', error);\n    \n    // Set default values on error\n    const elements = {\n      'total-games': '0',\n      'win-rate': '0%',\n      'best-score': '0',\n      'avg-accuracy': '0%'\n    };\n    \n    Object.entries(elements).forEach(([id, value]) => {\n      const element = document.getElementById(id);\n      if (element) element.textContent = value;\n    });\n  }\n}\n\n/**\n * Create and show a toast notification\n * @param {string} message - Message to display\n * @param {string} type - Type of toast (success, warning, error, info)\n * @param {number} duration - Display duration in milliseconds\n */\nexport function showToast(message, type = 'info', duration = 3000) {\n  const toast = document.createElement('div');\n  toast.className = `toast toast-${type}`;\n  \n  const icons = {\n    success: '‚úÖ',\n    warning: '‚ö†Ô∏è',\n    error: '‚ùå',\n    info: '‚ÑπÔ∏è'\n  };\n  \n  toast.innerHTML = `\n    <div class=\"toast-content\">\n      <span class=\"toast-icon\">${icons[type] || icons.info}</span>\n      <span class=\"toast-message\">${message}</span>\n    </div>\n  `;\n  \n  // Add styles\n  toast.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: ${getToastColor(type)};\n    color: white;\n    padding: 12px 16px;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n    z-index: 10000;\n    max-width: 300px;\n    animation: slideInRight 0.3s ease-out;\n    font-weight: 500;\n  `;\n  \n  // Add animation styles if not already added\n  if (!document.querySelector('#toast-styles')) {\n    const style = document.createElement('style');\n    style.id = 'toast-styles';\n    style.textContent = `\n      @keyframes slideInRight {\n        from {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n        to {\n          transform: translateX(0);\n          opacity: 1;\n        }\n      }\n      \n      @keyframes slideOutRight {\n        from {\n          transform: translateX(0);\n          opacity: 1;\n        }\n        to {\n          transform: translateX(100%);\n          opacity: 0;\n        }\n      }\n      \n      .toast-content {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n      \n      .toast-icon {\n        font-size: 16px;\n      }\n      \n      .toast-message {\n        font-size: 14px;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  document.body.appendChild(toast);\n  \n  // Auto remove after duration\n  setTimeout(() => {\n    toast.style.animation = 'slideOutRight 0.3s ease-in';\n    setTimeout(() => {\n      if (toast.parentElement) {\n        toast.remove();\n      }\n    }, 300);\n  }, duration);\n}\n\n/**\n * Get toast background color based on type\n * @private\n */\nfunction getToastColor(type) {\n  const colors = {\n    success: '#28a745',\n    warning: '#ffc107',\n    error: '#dc3545',\n    info: '#17a2b8'\n  };\n  return colors[type] || colors.info;\n}\n\n/**\n * Show achievement notification\n * @param {string} achievement - Achievement name\n * @param {string} description - Achievement description\n */\nexport function showAchievement(achievement, description) {\n  const achievementEl = document.createElement('div');\n  achievementEl.className = 'achievement-notification';\n  \n  achievementEl.innerHTML = `\n    <div class=\"achievement-content\">\n      <div class=\"achievement-icon\">üèÜ</div>\n      <div class=\"achievement-text\">\n        <div class=\"achievement-title\">Achievement Unlocked!</div>\n        <div class=\"achievement-name\">${achievement}</div>\n        <div class=\"achievement-desc\">${description}</div>\n      </div>\n    </div>\n  `;\n  \n  achievementEl.style.cssText = `\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background: linear-gradient(135deg, #ffd700, #ffed4a);\n    color: #333;\n    padding: 20px;\n    border-radius: 12px;\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n    z-index: 10001;\n    max-width: 400px;\n    text-align: center;\n    animation: achievementPop 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  `;\n  \n  // Add animation styles\n  if (!document.querySelector('#achievement-styles')) {\n    const style = document.createElement('style');\n    style.id = 'achievement-styles';\n    style.textContent = `\n      @keyframes achievementPop {\n        0% {\n          transform: translate(-50%, -50%) scale(0.5);\n          opacity: 0;\n        }\n        100% {\n          transform: translate(-50%, -50%) scale(1);\n          opacity: 1;\n        }\n      }\n      \n      .achievement-content {\n        display: flex;\n        align-items: center;\n        gap: 16px;\n      }\n      \n      .achievement-icon {\n        font-size: 48px;\n      }\n      \n      .achievement-title {\n        font-weight: bold;\n        font-size: 14px;\n        margin-bottom: 4px;\n      }\n      \n      .achievement-name {\n        font-weight: bold;\n        font-size: 18px;\n        margin-bottom: 4px;\n      }\n      \n      .achievement-desc {\n        font-size: 12px;\n        opacity: 0.8;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  \n  document.body.appendChild(achievementEl);\n  \n  // Auto remove after 4 seconds\n  setTimeout(() => {\n    achievementEl.style.animation = 'achievementPop 0.3s reverse';\n    setTimeout(() => {\n      if (achievementEl.parentElement) {\n        achievementEl.remove();\n      }\n    }, 300);\n  }, 4000);\n}\n","import { state, resetState, setDifficulty } from './state.js';\nimport * as ui from './ui.js';\nimport * as colorUtils from './colorUtils.js';\nimport { DOM, STRINGS, DIFFICULTIES } from './constants.js';\nimport { analytics, trackGameStart, trackGameEnd, trackEvent, EVENT_TYPES } from './analytics.js';\nimport { storage } from './storage.js';\nimport { startTiming, endTiming } from './performance.js';\n\nfunction startTimer() {\n  if (state.timerInterval) {\n    clearInterval(state.timerInterval);\n  }\n  state.timerInterval = setInterval(ui.updateTimer, 1000);\n}\n\nfunction calculateScore() {\n  const elapsedTime = Math.floor((Date.now() - state.startTime) / 1000);\n  const baseScore = DIFFICULTIES[state.difficulty].score;\n  const newScore = Math.max(0, baseScore - elapsedTime);\n  state.score += newScore;\n}\n\nfunction calculateAccuracy() {\n  if (!state.generatedColor || !DOM.colorInput.value) return 0;\n  \n  const userColor = '#' + DOM.colorInput.value.replace('#', '');\n  const targetColor = state.generatedColor;\n  \n  // Calculate color difference using Delta E approximation\n  const deltaE = colorUtils.calculateColorDifference(userColor, targetColor);\n  \n  // Convert Delta E to accuracy percentage (0-100)\n  // Perfect match (deltaE = 0) = 100%, deltaE > 100 = 0%\n  const accuracy = Math.max(0, Math.min(100, 100 - (deltaE / 100) * 100));\n  \n  return Math.round(accuracy * 100) / 100; // Round to 2 decimal places\n}\n\n/**\n * Check for and show achievement notifications\n * @param {boolean} won - Whether the game was won\n * @param {number} score - Final score\n * @param {Object} stats - Current game statistics\n */\nfunction checkAndShowAchievements(won, score) {\n  if (!won) return;\n  \n  try {\n    const gameStats = storage.getGameStats();\n    const highScores = storage.getHighScores();\n    \n    // First win achievement\n    if (gameStats.gamesWon === 1) {\n      ui.showAchievement(\n        'First Victory',\n        'Congratulations on your first successful color match!'\n      );\n    }\n    \n    // Multiple wins milestones\n    const winMilestones = [5, 10, 25, 50, 100];\n    if (winMilestones.includes(gameStats.gamesWon)) {\n      ui.showAchievement(\n        `${gameStats.gamesWon} Wins`,\n        `You've successfully completed ${gameStats.gamesWon} games!`\n      );\n    }\n    \n    // High score achievement\n    if (highScores.length > 0 && score === highScores[0].score) {\n      ui.showAchievement(\n        'New High Score!',\n        `Amazing! You scored ${score} points!`\n      );\n    }\n    \n    // Perfect accuracy achievement\n    const accuracy = calculateAccuracy();\n    if (accuracy === 100) {\n      ui.showAchievement(\n        'Perfect Match',\n        'Incredible! You got the exact color!'\n      );\n    }\n    \n    // Speed achievement (won in less than 10 seconds)\n    const gameDuration = Date.now() - state.startTime;\n    if (gameDuration < 10000) {\n      ui.showAchievement(\n        'Lightning Fast',\n        'You completed the game in under 10 seconds!'\n      );\n    }\n    \n    // Difficulty-based achievements\n    if (state.difficulty === 'hard') {\n      ui.showAchievement(\n        'Hard Mode Master',\n        'Excellent work completing hard difficulty!'\n      );\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Failed to check achievements:', error);\n  }\n}\n\nfunction endGame(isCorrect) {\n  clearInterval(state.timerInterval);\n  state.isGameActive = false;\n  \n  // Calculate game metrics\n  const gameDuration = Date.now() - state.startTime;\n  const difficulty = state.difficulty;\n  const accuracy = calculateAccuracy();\n  const finalScore = isCorrect ? state.score : 0;\n  \n  if (isCorrect) {\n    ui.updateFeedback(STRINGS.congratulations);\n    ui.playSound('correct');\n    calculateScore();\n    ui.updateScore();\n    \n    // Track successful game completion\n    trackGameEnd(true, state.score, gameDuration, difficulty, accuracy);\n    \n    // Record game statistics\n    storage.recordGame({\n      won: true,\n      score: state.score,\n      time: gameDuration,\n      difficulty: difficulty,\n      accuracy: accuracy,\n      targetColor: state.generatedColor,\n      attempts: DIFFICULTIES[difficulty].tips - state.tipCount + 1,\n      computerTipsUsed: DIFFICULTIES[difficulty].tips - state.computerTipCount,\n      timestamp: Date.now()\n    });\n    \n    console.log('üéâ Game won!', {\n      score: state.score,\n      time: `${Math.round(gameDuration / 1000)}s`,\n      accuracy: `${accuracy}%`,\n      difficulty\n    });\n    \n  } else {\n    ui.updateFeedback(STRINGS.sorry);\n    ui.playSound('wrong');\n    \n    // Track failed game completion\n    trackGameEnd(false, 0, gameDuration, difficulty, accuracy);\n    \n    // Record failed game\n    storage.recordGame({\n      won: false,\n      score: 0,\n      time: gameDuration,\n      difficulty: difficulty,\n      accuracy: accuracy,\n      targetColor: state.generatedColor,\n      attempts: DIFFICULTIES[difficulty].tips + 1,\n      computerTipsUsed: DIFFICULTIES[difficulty].tips - state.computerTipCount,\n      timestamp: Date.now()\n    });\n    \n    console.log('üíî Game lost', {\n      time: `${Math.round(gameDuration / 1000)}s`,\n      accuracy: `${accuracy}%`,\n      difficulty,\n      targetColor: state.generatedColor\n    });\n  }\n  \n  // End performance timing\n  endTiming('game-session', {\n    won: isCorrect,\n    difficulty: difficulty,\n    score: finalScore\n  });\n  \n  // Update statistics display\n  ui.updateStatistics();\n  \n  // Show achievement notifications for milestones\n  checkAndShowAchievements(isCorrect, finalScore);\n  \n  // Show result notification\n  if (isCorrect) {\n    ui.showToast(\n      `üéâ Congratulations! Score: ${finalScore}`,\n      'success',\n      4000\n    );\n  } else {\n    ui.showToast(\n      `üòî Better luck next time! Target was ${state.generatedColor}`,\n      'warning',\n      4000\n    );\n  }\n\n  ui.showResultModal();\n  ui.disableGameControls();\n}\n\nexport function checkColor() {\n  if (!state.isGameActive) return;\n\n  const userColor = '#' + DOM.colorInput.value.replace('#', '');\n  const isCorrect = userColor.toUpperCase() === state.generatedColor;\n  const accuracy = calculateAccuracy();\n  \n  // Track color guess attempt\n  analytics.trackColorGuess(userColor, state.generatedColor, accuracy, isCorrect);\n  \n  if (isCorrect) {\n    endGame(true);\n  } else {\n    state.tipCount--;\n    \n    trackEvent(EVENT_TYPES.COLOR_GUESS, {\n      attempt: DIFFICULTIES[state.difficulty].tips - state.tipCount,\n      totalAttempts: DIFFICULTIES[state.difficulty].tips,\n      accuracy: accuracy,\n      remainingTips: state.tipCount,\n      difficulty: state.difficulty\n    });\n    \n    if (state.tipCount > 0) {\n      let feedbackMessage = STRINGS.tryAgain(state.tipCount);\n      feedbackMessage += colorUtils.compareColors(\n        userColor,\n        state.generatedColor\n      );\n      ui.updateFeedback(feedbackMessage);\n      \n      console.log(`üéØ Color guess: ${accuracy}% accuracy, ${state.tipCount} tips remaining`);\n    } else {\n      endGame(false);\n    }\n  }\n}\n\nexport function computerGuess() {\n  if (state.computerTipCount <= 0 || !state.isGameActive) return;\n\n  const messages = [\n    { text: 'Ez k√∂zel lehet!', type: 'close' },\n    { text: 'Ez csak egy tipp, ne b√≠zz meg benne!', type: 'wrong' },\n    { text: 'Ez csak vicc volt!', type: 'silly' },\n  ];\n  const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n\n  let guess;\n  switch (randomMessage.type) {\n    case 'close':\n      guess = colorUtils.generateCloseColor(state.generatedColor);\n      break;\n    case 'wrong':\n      guess = colorUtils.generateRandomColor();\n      break;\n    case 'silly':\n      guess = '#FFFFFF';\n      break;\n  }\n\n  DOM.colorInput.value = guess.replace('#', '');\n  ui.updateUserColor(guess);\n  ui.updateFeedback(randomMessage.text);\n  state.computerTipCount--;\n  ui.updateTipButton();\n}\n\nexport function adjustColor(component, value) {\n  if (!state.isGameActive) return;\n  let currentColor = DOM.colorInput.value.replace('#', '');\n  if (!colorUtils.isValidHexColor(currentColor)) {\n    currentColor = '000000';\n    ui.updateFeedback(STRINGS.invalidColor);\n  }\n  const adjustedColor = colorUtils.adjustHexColor(\n    currentColor,\n    component,\n    value\n  );\n  DOM.colorInput.value = adjustedColor;\n  DOM.colorAdjust.value = '#' + adjustedColor;\n  ui.updateUserColor('#' + adjustedColor);\n\n  const feedbackMessage = colorUtils.compareColors(\n    adjustedColor,\n    state.generatedColor\n  );\n  ui.updateFeedback(feedbackMessage);\n  ui.updateComponentButtonsState(adjustedColor);\n}\n\nexport function startGame() {\n  resetState();\n  setDifficulty(DOM.difficulty.value);\n  ui.resetUI();\n\n  state.generatedColor = colorUtils.generateRandomColor();\n  ui.updateRandomColor(state.generatedColor, STRINGS.memorizeColor);\n  ui.setPulseAnimation(true);\n  ui.disableGameControls();\n\n  // Track game start\n  trackGameStart(state.difficulty, state.generatedColor);\n  startTiming('game-session');\n\n  setTimeout(() => {\n    ui.updateRandomColor('#FFFFFF', '');\n    ui.setPulseAnimation(false);\n    state.isGameActive = true;\n    ui.playSound('start');\n    ui.enableGameControls();\n    ui.updateTipButton();\n    state.startTime = Date.now();\n    startTimer();\n  }, 3000);\n}\n"],"names":["state","resetState","setDifficulty","difficulty","settings","DIFFICULTIES","formatTime","seconds","hours","minutes","secondsLeft","timeString","updateUserColor","color","DOM","updateRandomColor","text","updateFeedback","message","updateTimer","elapsedTime","updateScore","updateComponentButtonsState","hex","r","g","b","updateTipButton","STRINGS","showModal","hideModal","showResultModal","disableGameControls","btn","enableGameControls","playSound","type","error","setPulseAnimation","shouldPulse","resetUI","updateStatistics","gameHistory","storage","highScores","totalGames","gamesWon","game","totalAccuracy","sum","totalGamesElement","winRateElement","winRate","bestScoreElement","bestScore","avgAccuracyElement","avgAccuracy","id","value","element","showToast","duration","toast","icons","getToastColor","style","colors","showAchievement","achievement","description","achievementEl","startTimer","ui.updateTimer","calculateScore","baseScore","newScore","calculateAccuracy","userColor","targetColor","deltaE","colorUtils.calculateColorDifference","accuracy","checkAndShowAchievements","won","score","gameStats","ui.showAchievement","endGame","isCorrect","gameDuration","finalScore","ui.updateFeedback","ui.playSound","ui.updateScore","trackGameEnd","endTiming","ui.updateStatistics","ui.showToast","ui.showResultModal","ui.disableGameControls","checkColor","analytics","trackEvent","EVENT_TYPES","feedbackMessage","colorUtils.compareColors","computerGuess","messages","randomMessage","guess","colorUtils.generateCloseColor","colorUtils.generateRandomColor","ui.updateUserColor","ui.updateTipButton","adjustColor","component","currentColor","colorUtils.isValidHexColor","adjustedColor","colorUtils.adjustHexColor","ui.updateComponentButtonsState","startGame","ui.resetUI","ui.updateRandomColor","ui.setPulseAnimation","trackGameStart","startTiming","ui.enableGameControls"],"mappings":"4LAEO,MAAMA,EAAQ,CACnB,eAAgB,KAChB,UAAW,KACX,MAAO,EACP,SAAU,EACV,cAAe,KACf,iBAAkB,EAClB,aAAc,GACd,WAAY,MACd,EAEO,SAASC,GAAa,CAC3BD,EAAM,eAAiB,KACvBA,EAAM,UAAY,KAElBA,EAAM,SAAW,EACbA,EAAM,eACR,cAAcA,EAAM,aAAa,EAEnCA,EAAM,cAAgB,KACtBA,EAAM,iBAAmB,EACzBA,EAAM,aAAe,EACvB,CAEO,SAASE,EAAcC,EAAY,CACxCH,EAAM,WAAaG,EACnB,MAAMC,EAAWC,EAAaF,CAAU,EACxCH,EAAM,SAAWI,EAAS,SAC1BJ,EAAM,iBAAmBI,EAAS,gBACpC,CCzBA,SAASE,EAAWC,EAAS,CAC3B,MAAMC,EAAQ,KAAK,MAAMD,EAAU,IAAI,EACvCA,GAAW,KACX,MAAME,EAAU,KAAK,MAAMF,EAAU,EAAE,EACjCG,EAAcH,EAAU,GAE9B,IAAII,EAAa,GACjB,OAAIH,EAAQ,IACVG,GAAc,GAAGH,CAAK,UAEpBC,EAAU,GAAKD,EAAQ,KACzBG,GAAc,GAAGF,CAAO,UAE1BE,GAAc,GAAGD,CAAW,aAErBC,CACT,CAEO,SAASC,EAAgBC,EAAO,CACrCC,EAAI,UAAU,MAAM,gBAAkBD,CACxC,CAEO,SAASE,EAAkBF,EAAOG,EAAO,GAAI,CAClDF,EAAI,YAAY,MAAM,gBAAkBD,EACxCC,EAAI,YAAY,YAAcE,CAChC,CAEO,SAASC,EAAeC,EAAS,CACtCJ,EAAI,SAAS,YAAcI,EAE3BJ,EAAI,SAAS,UAAU,OAAO,kBAAkB,EAC3CA,EAAI,SAAS,YAClBA,EAAI,SAAS,UAAU,IAAI,kBAAkB,CAC/C,CAEO,SAASK,GAAc,CAC5B,MAAMC,EAAc,KAAK,OAAO,KAAK,MAAQpB,EAAM,WAAa,GAAI,EACpEc,EAAI,MAAM,YAAcR,EAAWc,CAAW,CAChD,CAEO,SAASC,GAAc,CAC5BP,EAAI,MAAM,YAAcd,EAAM,KAChC,CAEO,SAASsB,EAA4BC,EAAK,CAC/C,MAAMC,EAAI,SAASD,EAAI,UAAU,EAAG,CAAC,EAAG,EAAE,EACpCE,EAAI,SAASF,EAAI,UAAU,EAAG,CAAC,EAAG,EAAE,EACpCG,EAAI,SAASH,EAAI,UAAU,EAAG,CAAC,EAAG,EAAE,EAE1CT,EAAI,cAAc,SAAWU,GAAK,IAClCV,EAAI,eAAe,SAAWU,GAAK,EACnCV,EAAI,gBAAgB,SAAWW,GAAK,IACpCX,EAAI,iBAAiB,SAAWW,GAAK,EACrCX,EAAI,eAAe,SAAWY,GAAK,IACnCZ,EAAI,gBAAgB,SAAWY,GAAK,CACtC,CAEO,SAASC,GAAkB,CAC5B3B,EAAM,iBAAmB,GAC3Bc,EAAI,oBAAoB,SAAW,GACnCA,EAAI,oBAAoB,YAAcc,EAAQ,YAC5C5B,EAAM,gBACZ,IAEIc,EAAI,oBAAoB,SAAW,GACnCA,EAAI,oBAAoB,YAAcc,EAAQ,WAElD,CAEO,SAASC,GAAY,CAC1B,SAAS,KAAK,UAAU,IAAI,YAAY,CAC1C,CAEO,SAASC,IAAY,CAC1B,SAAS,KAAK,UAAU,OAAO,YAAY,CAC7C,CAEO,SAASC,GAAkB,CAChCjB,EAAI,iBAAiB,YAAcd,EAAM,eACzC6B,EAAS,CACX,CAEO,SAASG,GAAsB,CACpClB,EAAI,YAAY,SAAW,GAC3BA,EAAI,oBAAoB,SAAW,GACnCA,EAAI,oBAAoB,QAASmB,GAASA,EAAI,SAAW,EAAK,CAChE,CAEO,SAASC,GAAqB,CACnCpB,EAAI,YAAY,SAAW,GAC3BA,EAAI,oBAAoB,SAAW,GACnCA,EAAI,oBAAoB,QAASmB,GAASA,EAAI,SAAW,EAAM,CACjE,CAEO,SAASE,EAAUC,EAAM,CAC9B,GAAI,CACY,IAAI,MAAM,IAAIA,CAAI,MAAM,EAChC,KAAI,CACZ,OAASC,EAAO,CACd,QAAQ,MAAM,kBAAmBA,CAAK,EACtCpB,EAAe,wCAAwC,CACzD,CACF,CAEO,SAASqB,EAAkBC,EAAa,CACvCA,EACAzB,EAAI,YAAY,UAAU,IAAI,SAAS,EAEvCA,EAAI,YAAY,UAAU,OAAO,SAAS,CAElD,CAEO,SAAS0B,GAAU,CACxB1B,EAAI,WAAW,MAAQ,GACvBA,EAAI,UAAU,MAAM,gBAAkB,UACtCA,EAAI,SAAS,YAAc,GAC3BA,EAAI,MAAM,YAAc,IACxBO,EAAW,CACb,CAKO,SAASoB,GAAmB,CACjC,GAAI,CAEF,MAAMC,EAAcC,EAAQ,IAAI,eAAgB,CAAA,CAAE,EAC5CC,EAAaD,EAAQ,cAAa,EAGlCE,EAAaH,EAAY,OACzBI,EAAWJ,EAAY,OAAOK,GAAQA,EAAK,GAAG,EAAE,OAChDC,EAAgBN,EAAY,OAAO,CAACO,EAAKF,IAASE,GAAOF,EAAK,UAAY,GAAI,CAAC,EAG/EG,EAAoB,SAAS,eAAe,aAAa,EAC3DA,IACFA,EAAkB,YAAcL,EAAW,SAAQ,GAIrD,MAAMM,EAAiB,SAAS,eAAe,UAAU,EACzD,GAAIA,EAAgB,CAClB,MAAMC,EAAUP,EAAa,EAAKC,EAAWD,EAAa,IAAO,EACjEM,EAAe,YAAc,GAAG,KAAK,MAAMC,CAAO,CAAC,GACrD,CAGA,MAAMC,EAAmB,SAAS,eAAe,YAAY,EAC7D,GAAIA,EAAkB,CACpB,MAAMC,EAAYV,EAAW,OAAS,EAAIA,EAAW,CAAC,EAAE,MAAQ,EAChES,EAAiB,YAAcC,EAAU,SAAQ,CACnD,CAGA,MAAMC,EAAqB,SAAS,eAAe,cAAc,EACjE,GAAIA,EAAoB,CACtB,MAAMC,EAAcX,EAAa,EAAIG,EAAgBH,EAAa,EAClEU,EAAmB,YAAc,GAAG,KAAK,MAAMC,CAAW,CAAC,GAC7D,CAEA,QAAQ,IAAI,yBAA0B,CACpC,WAAAX,EACA,QAAS,GAAG,KAAK,MAAOC,EAAWD,EAAa,KAAQ,CAAC,CAAC,IAC1D,UAAWD,EAAW,OAAS,EAAIA,EAAW,CAAC,EAAE,MAAQ,EACzD,YAAa,GAAG,KAAK,MAAOI,EAAgBH,GAAe,CAAC,CAAC,GACnE,CAAK,CAEH,OAASR,EAAO,CACd,QAAQ,MAAM,iCAAkCA,CAAK,EAUrD,OAAO,QAPU,CACf,cAAe,IACf,WAAY,KACZ,aAAc,IACd,eAAgB,IACtB,CAE2B,EAAE,QAAQ,CAAC,CAACoB,EAAIC,CAAK,IAAM,CAChD,MAAMC,EAAU,SAAS,eAAeF,CAAE,EACtCE,IAASA,EAAQ,YAAcD,EACrC,CAAC,CACH,CACF,CAQO,SAASE,EAAU1C,EAASkB,EAAO,OAAQyB,EAAW,IAAM,CACjE,MAAMC,EAAQ,SAAS,cAAc,KAAK,EAC1CA,EAAM,UAAY,eAAe1B,CAAI,GAErC,MAAM2B,EAAQ,CACZ,QAAS,IACT,QAAS,KACT,MAAO,IACP,KAAM,IACV,EA0BE,GAxBAD,EAAM,UAAY;AAAA;AAAA,iCAEaC,EAAM3B,CAAI,GAAK2B,EAAM,IAAI;AAAA,oCACtB7C,CAAO;AAAA;AAAA,IAKzC4C,EAAM,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA,kBAINE,EAAc5B,CAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAY/B,CAAC,SAAS,cAAc,eAAe,EAAG,CAC5C,MAAM6B,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,eACXA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqCpB,SAAS,KAAK,YAAYA,CAAK,CACjC,CAEA,SAAS,KAAK,YAAYH,CAAK,EAG/B,WAAW,IAAM,CACfA,EAAM,MAAM,UAAY,6BACxB,WAAW,IAAM,CACXA,EAAM,eACRA,EAAM,OAAM,CAEhB,EAAG,GAAG,CACR,EAAGD,CAAQ,CACb,CAMA,SAASG,EAAc5B,EAAM,CAC3B,MAAM8B,EAAS,CACb,QAAS,UACT,QAAS,UACT,MAAO,UACP,KAAM,SACV,EACE,OAAOA,EAAO9B,CAAI,GAAK8B,EAAO,IAChC,CAOO,SAASC,EAAgBC,EAAaC,EAAa,CACxD,MAAMC,EAAgB,SAAS,cAAc,KAAK,EA+BlD,GA9BAA,EAAc,UAAY,2BAE1BA,EAAc,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,wCAKYF,CAAW;AAAA,wCACXC,CAAW;AAAA;AAAA;AAAA,IAKjDC,EAAc,MAAM,QAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiB1B,CAAC,SAAS,cAAc,qBAAqB,EAAG,CAClD,MAAML,EAAQ,SAAS,cAAc,OAAO,EAC5CA,EAAM,GAAK,qBACXA,EAAM,YAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuCpB,SAAS,KAAK,YAAYA,CAAK,CACjC,CAEA,SAAS,KAAK,YAAYK,CAAa,EAGvC,WAAW,IAAM,CACfA,EAAc,MAAM,UAAY,8BAChC,WAAW,IAAM,CACXA,EAAc,eAChBA,EAAc,OAAM,CAExB,EAAG,GAAG,CACR,EAAG,GAAI,CACT,CCpYA,SAASC,GAAa,CAChBvE,EAAM,eACR,cAAcA,EAAM,aAAa,EAEnCA,EAAM,cAAgB,YAAYwE,EAAgB,GAAI,CACxD,CAEA,SAASC,GAAiB,CACxB,MAAMrD,EAAc,KAAK,OAAO,KAAK,MAAQpB,EAAM,WAAa,GAAI,EAC9D0E,EAAYrE,EAAaL,EAAM,UAAU,EAAE,MAC3C2E,EAAW,KAAK,IAAI,EAAGD,EAAYtD,CAAW,EACpDpB,EAAM,OAAS2E,CACjB,CAEA,SAASC,GAAoB,CAC3B,GAAI,CAAC5E,EAAM,gBAAkB,CAACc,EAAI,WAAW,MAAO,MAAO,GAE3D,MAAM+D,EAAY,IAAM/D,EAAI,WAAW,MAAM,QAAQ,IAAK,EAAE,EACtDgE,EAAc9E,EAAM,eAGpB+E,EAASC,EAAoCH,EAAWC,CAAW,EAInEG,EAAW,KAAK,IAAI,EAAG,KAAK,IAAI,IAAK,IAAOF,EAAS,IAAO,GAAG,CAAC,EAEtE,OAAO,KAAK,MAAME,EAAW,GAAG,EAAI,GACtC,CAQA,SAASC,GAAyBC,EAAKC,EAAO,CAC5C,GAAKD,EAEL,GAAI,CACF,MAAME,EAAY1C,EAAQ,aAAY,EAChCC,EAAaD,EAAQ,cAAa,EAGpC0C,EAAU,WAAa,GACzBC,EACE,gBACA,uDACR,EAI0B,CAAC,EAAG,GAAI,GAAI,GAAI,GAAG,EACvB,SAASD,EAAU,QAAQ,GAC3CC,EACE,GAAGD,EAAU,QAAQ,QACrB,iCAAiCA,EAAU,QAAQ,SAC3D,EAIQzC,EAAW,OAAS,GAAKwC,IAAUxC,EAAW,CAAC,EAAE,OACnD0C,EACE,kBACA,uBAAuBF,CAAK,UACpC,EAIqBR,EAAiB,IACjB,KACfU,EACE,gBACA,sCACR,EAIyB,KAAK,IAAG,EAAKtF,EAAM,UACrB,KACjBsF,EACE,iBACA,6CACR,EAIQtF,EAAM,aAAe,QACvBsF,EACE,mBACA,4CACR,CAGE,OAASjD,EAAO,CACd,QAAQ,MAAM,kCAAmCA,CAAK,CACxD,CACF,CAEA,SAASkD,EAAQC,EAAW,CAC1B,cAAcxF,EAAM,aAAa,EACjCA,EAAM,aAAe,GAGrB,MAAMyF,EAAe,KAAK,IAAG,EAAKzF,EAAM,UAClCG,EAAaH,EAAM,WACnBiF,EAAWL,EAAiB,EAC5Bc,EAAaF,EAAYxF,EAAM,MAAQ,EAEzCwF,GACFG,EAAkB/D,EAAQ,eAAe,EACzCgE,EAAa,SAAS,EACtBnB,EAAc,EACdoB,EAAc,EAGdC,EAAa,GAAM9F,EAAM,MAAOyF,EAActF,EAAY8E,CAAQ,EAGlEtC,EAAQ,WAAW,CACjB,IAAK,GACL,MAAO3C,EAAM,MACb,KAAMyF,EACN,WAAYtF,EACZ,SAAU8E,EACV,YAAajF,EAAM,eACnB,SAAUK,EAAaF,CAAU,EAAE,KAAOH,EAAM,SAAW,EAC3D,iBAAkBK,EAAaF,CAAU,EAAE,KAAOH,EAAM,iBACxD,UAAW,KAAK,IAAG,CACzB,CAAK,EAED,QAAQ,IAAI,eAAgB,CAC1B,MAAOA,EAAM,MACb,KAAM,GAAG,KAAK,MAAMyF,EAAe,GAAI,CAAC,IACxC,SAAU,GAAGR,CAAQ,IACrB,WAAA9E,CACN,CAAK,IAGDwF,EAAkB/D,EAAQ,KAAK,EAC/BgE,EAAa,OAAO,EAGpBE,EAAa,GAAO,EAAGL,EAActF,EAAY8E,CAAQ,EAGzDtC,EAAQ,WAAW,CACjB,IAAK,GACL,MAAO,EACP,KAAM8C,EACN,WAAYtF,EACZ,SAAU8E,EACV,YAAajF,EAAM,eACnB,SAAUK,EAAaF,CAAU,EAAE,KAAO,EAC1C,iBAAkBE,EAAaF,CAAU,EAAE,KAAOH,EAAM,iBACxD,UAAW,KAAK,IAAG,CACzB,CAAK,EAED,QAAQ,IAAI,eAAgB,CAC1B,KAAM,GAAG,KAAK,MAAMyF,EAAe,GAAI,CAAC,IACxC,SAAU,GAAGR,CAAQ,IACrB,WAAA9E,EACA,YAAaH,EAAM,cACzB,CAAK,GAIH+F,EAAU,eAAgB,CACxB,IAAKP,EACL,WAAYrF,EACZ,MAAOuF,CACX,CAAG,EAGDM,EAAmB,EAGnBd,GAAyBM,EAAWE,CAAU,EAG1CF,EACFS,EACE,8BAA8BP,CAAU,GACxC,UACA,GACN,EAEIO,EACE,wCAAwCjG,EAAM,cAAc,GAC5D,UACA,GACN,EAGEkG,EAAkB,EAClBC,EAAsB,CACxB,CAEO,SAASC,IAAa,CAC3B,GAAI,CAACpG,EAAM,aAAc,OAEzB,MAAM6E,EAAY,IAAM/D,EAAI,WAAW,MAAM,QAAQ,IAAK,EAAE,EACtD0E,EAAYX,EAAU,YAAW,IAAO7E,EAAM,eAC9CiF,EAAWL,EAAiB,EAKlC,GAFAyB,EAAU,gBAAgBxB,EAAW7E,EAAM,eAAgBiF,EAAUO,CAAS,EAE1EA,EACFD,EAAQ,EAAI,UAEZvF,EAAM,WAENsG,EAAWC,EAAY,YAAa,CAClC,QAASlG,EAAaL,EAAM,UAAU,EAAE,KAAOA,EAAM,SACrD,cAAeK,EAAaL,EAAM,UAAU,EAAE,KAC9C,SAAUiF,EACV,cAAejF,EAAM,SACrB,WAAYA,EAAM,UACxB,CAAK,EAEGA,EAAM,SAAW,EAAG,CACtB,IAAIwG,EAAkB5E,EAAQ,SAAS5B,EAAM,QAAQ,EACrDwG,GAAmBC,EACjB5B,EACA7E,EAAM,cACd,EACM2F,EAAkBa,CAAe,EAEjC,QAAQ,IAAI,mBAAmBvB,CAAQ,eAAejF,EAAM,QAAQ,iBAAiB,CACvF,MACEuF,EAAQ,EAAK,CAGnB,CAEO,SAASmB,IAAgB,CAC9B,GAAI1G,EAAM,kBAAoB,GAAK,CAACA,EAAM,aAAc,OAExD,MAAM2G,EAAW,CACf,CAAE,KAAM,kBAAmB,KAAM,OAAO,EACxC,CAAE,KAAM,uCAAwC,KAAM,OAAO,EAC7D,CAAE,KAAM,qBAAsB,KAAM,OAAO,CAC/C,EACQC,EAAgBD,EAAS,KAAK,MAAM,KAAK,OAAM,EAAKA,EAAS,MAAM,CAAC,EAE1E,IAAIE,EACJ,OAAQD,EAAc,KAAI,CACxB,IAAK,QACHC,EAAQC,EAA8B9G,EAAM,cAAc,EAC1D,MACF,IAAK,QACH6G,EAAQE,EAA8B,EACtC,MACF,IAAK,QACHF,EAAQ,UACR,KACN,CAEE/F,EAAI,WAAW,MAAQ+F,EAAM,QAAQ,IAAK,EAAE,EAC5CG,EAAmBH,CAAK,EACxBlB,EAAkBiB,EAAc,IAAI,EACpC5G,EAAM,mBACNiH,EAAkB,CACpB,CAEO,SAASC,GAAYC,EAAWzD,EAAO,CAC5C,GAAI,CAAC1D,EAAM,aAAc,OACzB,IAAIoH,EAAetG,EAAI,WAAW,MAAM,QAAQ,IAAK,EAAE,EAClDuG,EAA2BD,CAAY,IAC1CA,EAAe,SACfzB,EAAkB/D,EAAQ,YAAY,GAExC,MAAM0F,EAAgBC,EACpBH,EACAD,EACAzD,CACJ,EACE5C,EAAI,WAAW,MAAQwG,EACvBxG,EAAI,YAAY,MAAQ,IAAMwG,EAC9BN,EAAmB,IAAMM,CAAa,EAEtC,MAAMd,EAAkBC,EACtBa,EACAtH,EAAM,cACV,EACE2F,EAAkBa,CAAe,EACjCgB,EAA+BF,CAAa,CAC9C,CAEO,SAASG,IAAY,CAC1BxH,EAAU,EACVC,EAAcY,EAAI,WAAW,KAAK,EAClC4G,EAAU,EAEV1H,EAAM,eAAiB+G,EAA8B,EACrDY,EAAqB3H,EAAM,eAAgB4B,EAAQ,aAAa,EAChEgG,EAAqB,EAAI,EACzBzB,EAAsB,EAGtB0B,EAAe7H,EAAM,WAAYA,EAAM,cAAc,EACrD8H,EAAY,cAAc,EAE1B,WAAW,IAAM,CACfH,EAAqB,UAAW,EAAE,EAClCC,EAAqB,EAAK,EAC1B5H,EAAM,aAAe,GACrB4F,EAAa,OAAO,EACpBmC,EAAqB,EACrBd,EAAkB,EAClBjH,EAAM,UAAY,KAAK,IAAG,EAC1BuE,EAAU,CACZ,EAAG,GAAI,CACT"}