name: 🚀 ToneTracker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Quality Checks
  quality:
    runs-on: ubuntu-latest
    name: 🔍 Code Quality & Testing
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 🎨 Check code formatting
      run: npm run format -- --check
      
    - name: 🧪 Run unit tests
      run: npm run test:run
      
    - name: 📊 Generate test coverage
      run: npm run test:coverage
      
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      continue-on-error: true
      with:
        file: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: 🔒 Security audit
      run: npm audit --omit=dev
      continue-on-error: true

  # Performance & E2E Tests
  e2e:
    runs-on: ubuntu-latest
    name: 🎭 E2E & Performance Tests
    needs: quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: 🧪 Run E2E tests
      run: npm run e2e
      
    - name: 📱 Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7

  # Build & Deploy
  deploy:
    runs-on: ubuntu-latest
    name: 🚀 Build & Deploy
    needs: [quality, e2e]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📚 Install dependencies
      run: npm ci
      
    - name: 🌐 Install Chrome for Lighthouse
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
      
    - name: 🏗️ Build for production
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: 📋 Copy CNAME file to dist
      run: cp CNAME dist/
      
    - name: ✅ Validate build output
      run: |
        echo "## Build Validation 🔍" >> $GITHUB_STEP_SUMMARY
        echo "### Files in dist directory:" >> $GITHUB_STEP_SUMMARY
        ls -la dist/ >> $GITHUB_STEP_SUMMARY
        echo "### Checking required files:" >> $GITHUB_STEP_SUMMARY
        test -f dist/index.html && echo "✅ index.html exists" >> $GITHUB_STEP_SUMMARY || echo "❌ index.html missing" >> $GITHUB_STEP_SUMMARY
        test -f dist/CNAME && echo "✅ CNAME exists" >> $GITHUB_STEP_SUMMARY || echo "❌ CNAME missing" >> $GITHUB_STEP_SUMMARY
        test -d dist/assets && echo "✅ assets directory exists" >> $GITHUB_STEP_SUMMARY || echo "❌ assets directory missing" >> $GITHUB_STEP_SUMMARY
        
    - name: 📊 Analyze bundle size
      run: |
        echo "## Bundle Size Analysis 📦" >> $GITHUB_STEP_SUMMARY
        du -sh dist/* >> $GITHUB_STEP_SUMMARY
        echo "### Gzipped sizes:" >> $GITHUB_STEP_SUMMARY
        gzip -c dist/assets/features-*.js | wc -c | xargs -I {} echo "Features bundle: {} bytes" >> $GITHUB_STEP_SUMMARY
        gzip -c dist/assets/index-*.css | wc -c | xargs -I {} echo "CSS bundle: {} bytes" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true
      
    - name: 🔍 Run Lighthouse audit
      run: |
        npm run serve &
        sleep 10
        npm run performance:audit:ci
        pkill -f "python3 -m http.server"
      continue-on-error: true
      
    - name: 📱 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: tonetracker.app
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: '🚀 Deploy ToneTracker v${{ github.sha }}'
        enable_jekyll: false
        allow_empty_commit: false
        
    - name: 📈 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30
        
    - name: 📊 Upload Lighthouse report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-report
        path: lighthouse-report.html
        retention-days: 7

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    name: 📢 Deployment Notification
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🎉 Success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "## ✅ Deployment Successful! 🚀" >> $GITHUB_STEP_SUMMARY
        echo "ToneTracker has been successfully deployed to production." >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Live URL: https://tonetracker.app" >> $GITHUB_STEP_SUMMARY
        
    - name: ❌ Failure notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "## ❌ Deployment Failed 💥" >> $GITHUB_STEP_SUMMARY
        echo "Please check the deployment logs and fix any issues." >> $GITHUB_STEP_SUMMARY

